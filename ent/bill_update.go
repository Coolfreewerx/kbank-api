// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kapi/ent/bill"
	"kapi/ent/billdetail"
	"kapi/ent/customer"
	"kapi/ent/predicate"
	"kapi/ent/store"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BillUpdate is the builder for updating Bill entities.
type BillUpdate struct {
	config
	hooks    []Hook
	mutation *BillMutation
}

// Where appends a list predicates to the BillUpdate builder.
func (bu *BillUpdate) Where(ps ...predicate.Bill) *BillUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetBillerID sets the "biller_id" field.
func (bu *BillUpdate) SetBillerID(i int) *BillUpdate {
	bu.mutation.SetBillerID(i)
	return bu
}

// SetNillableBillerID sets the "biller_id" field if the given value is not nil.
func (bu *BillUpdate) SetNillableBillerID(i *int) *BillUpdate {
	if i != nil {
		bu.SetBillerID(*i)
	}
	return bu
}

// ClearBillerID clears the value of the "biller_id" field.
func (bu *BillUpdate) ClearBillerID() *BillUpdate {
	bu.mutation.ClearBillerID()
	return bu
}

// SetRef1 sets the "ref_1" field.
func (bu *BillUpdate) SetRef1(i int) *BillUpdate {
	bu.mutation.SetRef1(i)
	return bu
}

// SetNillableRef1 sets the "ref_1" field if the given value is not nil.
func (bu *BillUpdate) SetNillableRef1(i *int) *BillUpdate {
	if i != nil {
		bu.SetRef1(*i)
	}
	return bu
}

// ClearRef1 clears the value of the "ref_1" field.
func (bu *BillUpdate) ClearRef1() *BillUpdate {
	bu.mutation.ClearRef1()
	return bu
}

// SetRef2 sets the "ref_2" field.
func (bu *BillUpdate) SetRef2(i int) *BillUpdate {
	bu.mutation.ResetRef2()
	bu.mutation.SetRef2(i)
	return bu
}

// SetNillableRef2 sets the "ref_2" field if the given value is not nil.
func (bu *BillUpdate) SetNillableRef2(i *int) *BillUpdate {
	if i != nil {
		bu.SetRef2(*i)
	}
	return bu
}

// AddRef2 adds i to the "ref_2" field.
func (bu *BillUpdate) AddRef2(i int) *BillUpdate {
	bu.mutation.AddRef2(i)
	return bu
}

// ClearRef2 clears the value of the "ref_2" field.
func (bu *BillUpdate) ClearRef2() *BillUpdate {
	bu.mutation.ClearRef2()
	return bu
}

// SetStoreID sets the "store" edge to the Store entity by ID.
func (bu *BillUpdate) SetStoreID(id int) *BillUpdate {
	bu.mutation.SetStoreID(id)
	return bu
}

// SetNillableStoreID sets the "store" edge to the Store entity by ID if the given value is not nil.
func (bu *BillUpdate) SetNillableStoreID(id *int) *BillUpdate {
	if id != nil {
		bu = bu.SetStoreID(*id)
	}
	return bu
}

// SetStore sets the "store" edge to the Store entity.
func (bu *BillUpdate) SetStore(s *Store) *BillUpdate {
	return bu.SetStoreID(s.ID)
}

// SetCustomersID sets the "customers" edge to the Customer entity by ID.
func (bu *BillUpdate) SetCustomersID(id int) *BillUpdate {
	bu.mutation.SetCustomersID(id)
	return bu
}

// SetNillableCustomersID sets the "customers" edge to the Customer entity by ID if the given value is not nil.
func (bu *BillUpdate) SetNillableCustomersID(id *int) *BillUpdate {
	if id != nil {
		bu = bu.SetCustomersID(*id)
	}
	return bu
}

// SetCustomers sets the "customers" edge to the Customer entity.
func (bu *BillUpdate) SetCustomers(c *Customer) *BillUpdate {
	return bu.SetCustomersID(c.ID)
}

// SetBillDetailID sets the "bill_detail" edge to the BillDetail entity by ID.
func (bu *BillUpdate) SetBillDetailID(id int) *BillUpdate {
	bu.mutation.SetBillDetailID(id)
	return bu
}

// SetNillableBillDetailID sets the "bill_detail" edge to the BillDetail entity by ID if the given value is not nil.
func (bu *BillUpdate) SetNillableBillDetailID(id *int) *BillUpdate {
	if id != nil {
		bu = bu.SetBillDetailID(*id)
	}
	return bu
}

// SetBillDetail sets the "bill_detail" edge to the BillDetail entity.
func (bu *BillUpdate) SetBillDetail(b *BillDetail) *BillUpdate {
	return bu.SetBillDetailID(b.ID)
}

// Mutation returns the BillMutation object of the builder.
func (bu *BillUpdate) Mutation() *BillMutation {
	return bu.mutation
}

// ClearStore clears the "store" edge to the Store entity.
func (bu *BillUpdate) ClearStore() *BillUpdate {
	bu.mutation.ClearStore()
	return bu
}

// ClearCustomers clears the "customers" edge to the Customer entity.
func (bu *BillUpdate) ClearCustomers() *BillUpdate {
	bu.mutation.ClearCustomers()
	return bu
}

// ClearBillDetail clears the "bill_detail" edge to the BillDetail entity.
func (bu *BillUpdate) ClearBillDetail() *BillUpdate {
	bu.mutation.ClearBillDetail()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BillUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BillUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BillUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BillUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BillUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(bill.Table, bill.Columns, sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Ref2(); ok {
		_spec.SetField(bill.FieldRef2, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedRef2(); ok {
		_spec.AddField(bill.FieldRef2, field.TypeInt, value)
	}
	if bu.mutation.Ref2Cleared() {
		_spec.ClearField(bill.FieldRef2, field.TypeInt)
	}
	if bu.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.StoreTable,
			Columns: []string{bill.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.StoreTable,
			Columns: []string{bill.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.CustomersTable,
			Columns: []string{bill.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.CustomersTable,
			Columns: []string{bill.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.BillDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bill.BillDetailTable,
			Columns: []string{bill.BillDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BillDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bill.BillDetailTable,
			Columns: []string{bill.BillDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BillUpdateOne is the builder for updating a single Bill entity.
type BillUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillMutation
}

// SetBillerID sets the "biller_id" field.
func (buo *BillUpdateOne) SetBillerID(i int) *BillUpdateOne {
	buo.mutation.SetBillerID(i)
	return buo
}

// SetNillableBillerID sets the "biller_id" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableBillerID(i *int) *BillUpdateOne {
	if i != nil {
		buo.SetBillerID(*i)
	}
	return buo
}

// ClearBillerID clears the value of the "biller_id" field.
func (buo *BillUpdateOne) ClearBillerID() *BillUpdateOne {
	buo.mutation.ClearBillerID()
	return buo
}

// SetRef1 sets the "ref_1" field.
func (buo *BillUpdateOne) SetRef1(i int) *BillUpdateOne {
	buo.mutation.SetRef1(i)
	return buo
}

// SetNillableRef1 sets the "ref_1" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableRef1(i *int) *BillUpdateOne {
	if i != nil {
		buo.SetRef1(*i)
	}
	return buo
}

// ClearRef1 clears the value of the "ref_1" field.
func (buo *BillUpdateOne) ClearRef1() *BillUpdateOne {
	buo.mutation.ClearRef1()
	return buo
}

// SetRef2 sets the "ref_2" field.
func (buo *BillUpdateOne) SetRef2(i int) *BillUpdateOne {
	buo.mutation.ResetRef2()
	buo.mutation.SetRef2(i)
	return buo
}

// SetNillableRef2 sets the "ref_2" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableRef2(i *int) *BillUpdateOne {
	if i != nil {
		buo.SetRef2(*i)
	}
	return buo
}

// AddRef2 adds i to the "ref_2" field.
func (buo *BillUpdateOne) AddRef2(i int) *BillUpdateOne {
	buo.mutation.AddRef2(i)
	return buo
}

// ClearRef2 clears the value of the "ref_2" field.
func (buo *BillUpdateOne) ClearRef2() *BillUpdateOne {
	buo.mutation.ClearRef2()
	return buo
}

// SetStoreID sets the "store" edge to the Store entity by ID.
func (buo *BillUpdateOne) SetStoreID(id int) *BillUpdateOne {
	buo.mutation.SetStoreID(id)
	return buo
}

// SetNillableStoreID sets the "store" edge to the Store entity by ID if the given value is not nil.
func (buo *BillUpdateOne) SetNillableStoreID(id *int) *BillUpdateOne {
	if id != nil {
		buo = buo.SetStoreID(*id)
	}
	return buo
}

// SetStore sets the "store" edge to the Store entity.
func (buo *BillUpdateOne) SetStore(s *Store) *BillUpdateOne {
	return buo.SetStoreID(s.ID)
}

// SetCustomersID sets the "customers" edge to the Customer entity by ID.
func (buo *BillUpdateOne) SetCustomersID(id int) *BillUpdateOne {
	buo.mutation.SetCustomersID(id)
	return buo
}

// SetNillableCustomersID sets the "customers" edge to the Customer entity by ID if the given value is not nil.
func (buo *BillUpdateOne) SetNillableCustomersID(id *int) *BillUpdateOne {
	if id != nil {
		buo = buo.SetCustomersID(*id)
	}
	return buo
}

// SetCustomers sets the "customers" edge to the Customer entity.
func (buo *BillUpdateOne) SetCustomers(c *Customer) *BillUpdateOne {
	return buo.SetCustomersID(c.ID)
}

// SetBillDetailID sets the "bill_detail" edge to the BillDetail entity by ID.
func (buo *BillUpdateOne) SetBillDetailID(id int) *BillUpdateOne {
	buo.mutation.SetBillDetailID(id)
	return buo
}

// SetNillableBillDetailID sets the "bill_detail" edge to the BillDetail entity by ID if the given value is not nil.
func (buo *BillUpdateOne) SetNillableBillDetailID(id *int) *BillUpdateOne {
	if id != nil {
		buo = buo.SetBillDetailID(*id)
	}
	return buo
}

// SetBillDetail sets the "bill_detail" edge to the BillDetail entity.
func (buo *BillUpdateOne) SetBillDetail(b *BillDetail) *BillUpdateOne {
	return buo.SetBillDetailID(b.ID)
}

// Mutation returns the BillMutation object of the builder.
func (buo *BillUpdateOne) Mutation() *BillMutation {
	return buo.mutation
}

// ClearStore clears the "store" edge to the Store entity.
func (buo *BillUpdateOne) ClearStore() *BillUpdateOne {
	buo.mutation.ClearStore()
	return buo
}

// ClearCustomers clears the "customers" edge to the Customer entity.
func (buo *BillUpdateOne) ClearCustomers() *BillUpdateOne {
	buo.mutation.ClearCustomers()
	return buo
}

// ClearBillDetail clears the "bill_detail" edge to the BillDetail entity.
func (buo *BillUpdateOne) ClearBillDetail() *BillUpdateOne {
	buo.mutation.ClearBillDetail()
	return buo
}

// Where appends a list predicates to the BillUpdate builder.
func (buo *BillUpdateOne) Where(ps ...predicate.Bill) *BillUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BillUpdateOne) Select(field string, fields ...string) *BillUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Bill entity.
func (buo *BillUpdateOne) Save(ctx context.Context) (*Bill, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BillUpdateOne) SaveX(ctx context.Context) *Bill {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BillUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BillUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BillUpdateOne) sqlSave(ctx context.Context) (_node *Bill, err error) {
	_spec := sqlgraph.NewUpdateSpec(bill.Table, bill.Columns, sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Bill.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bill.FieldID)
		for _, f := range fields {
			if !bill.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bill.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Ref2(); ok {
		_spec.SetField(bill.FieldRef2, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedRef2(); ok {
		_spec.AddField(bill.FieldRef2, field.TypeInt, value)
	}
	if buo.mutation.Ref2Cleared() {
		_spec.ClearField(bill.FieldRef2, field.TypeInt)
	}
	if buo.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.StoreTable,
			Columns: []string{bill.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.StoreTable,
			Columns: []string{bill.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.CustomersTable,
			Columns: []string{bill.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.CustomersTable,
			Columns: []string{bill.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.BillDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bill.BillDetailTable,
			Columns: []string{bill.BillDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BillDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bill.BillDetailTable,
			Columns: []string{bill.BillDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Bill{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
