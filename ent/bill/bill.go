// Code generated by ent, DO NOT EDIT.

package bill

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the bill type in the database.
	Label = "bill"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBillerID holds the string denoting the biller_id field in the database.
	FieldBillerID = "biller_id"
	// FieldRef1 holds the string denoting the ref_1 field in the database.
	FieldRef1 = "ref_1"
	// FieldRef2 holds the string denoting the ref_2 field in the database.
	FieldRef2 = "ref_2"
	// EdgeStore holds the string denoting the store edge name in mutations.
	EdgeStore = "store"
	// EdgeCustomers holds the string denoting the customers edge name in mutations.
	EdgeCustomers = "customers"
	// EdgeBillDetail holds the string denoting the bill_detail edge name in mutations.
	EdgeBillDetail = "bill_detail"
	// Table holds the table name of the bill in the database.
	Table = "bills"
	// StoreTable is the table that holds the store relation/edge.
	StoreTable = "bills"
	// StoreInverseTable is the table name for the Store entity.
	// It exists in this package in order to avoid circular dependency with the "store" package.
	StoreInverseTable = "stores"
	// StoreColumn is the table column denoting the store relation/edge.
	StoreColumn = "biller_id"
	// CustomersTable is the table that holds the customers relation/edge.
	CustomersTable = "bills"
	// CustomersInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomersInverseTable = "customers"
	// CustomersColumn is the table column denoting the customers relation/edge.
	CustomersColumn = "ref_1"
	// BillDetailTable is the table that holds the bill_detail relation/edge.
	BillDetailTable = "bill_details"
	// BillDetailInverseTable is the table name for the BillDetail entity.
	// It exists in this package in order to avoid circular dependency with the "billdetail" package.
	BillDetailInverseTable = "bill_details"
	// BillDetailColumn is the table column denoting the bill_detail relation/edge.
	BillDetailColumn = "bill_bill_detail"
)

// Columns holds all SQL columns for bill fields.
var Columns = []string{
	FieldID,
	FieldBillerID,
	FieldRef1,
	FieldRef2,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Bill queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBillerID orders the results by the biller_id field.
func ByBillerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillerID, opts...).ToFunc()
}

// ByRef1 orders the results by the ref_1 field.
func ByRef1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRef1, opts...).ToFunc()
}

// ByRef2 orders the results by the ref_2 field.
func ByRef2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRef2, opts...).ToFunc()
}

// ByStoreField orders the results by store field.
func ByStoreField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStoreStep(), sql.OrderByField(field, opts...))
	}
}

// ByCustomersField orders the results by customers field.
func ByCustomersField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomersStep(), sql.OrderByField(field, opts...))
	}
}

// ByBillDetailField orders the results by bill_detail field.
func ByBillDetailField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBillDetailStep(), sql.OrderByField(field, opts...))
	}
}
func newStoreStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StoreInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, StoreTable, StoreColumn),
	)
}
func newCustomersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CustomersTable, CustomersColumn),
	)
}
func newBillDetailStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BillDetailInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BillDetailTable, BillDetailColumn),
	)
}
