// Code generated by ent, DO NOT EDIT.

package bill

import (
	"kapi/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Bill {
	return predicate.Bill(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Bill {
	return predicate.Bill(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Bill {
	return predicate.Bill(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Bill {
	return predicate.Bill(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Bill {
	return predicate.Bill(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Bill {
	return predicate.Bill(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Bill {
	return predicate.Bill(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Bill {
	return predicate.Bill(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Bill {
	return predicate.Bill(sql.FieldLTE(FieldID, id))
}

// BillerID applies equality check predicate on the "biller_id" field. It's identical to BillerIDEQ.
func BillerID(v int) predicate.Bill {
	return predicate.Bill(sql.FieldEQ(FieldBillerID, v))
}

// Ref1 applies equality check predicate on the "ref_1" field. It's identical to Ref1EQ.
func Ref1(v int) predicate.Bill {
	return predicate.Bill(sql.FieldEQ(FieldRef1, v))
}

// Ref2 applies equality check predicate on the "ref_2" field. It's identical to Ref2EQ.
func Ref2(v int) predicate.Bill {
	return predicate.Bill(sql.FieldEQ(FieldRef2, v))
}

// BillerIDEQ applies the EQ predicate on the "biller_id" field.
func BillerIDEQ(v int) predicate.Bill {
	return predicate.Bill(sql.FieldEQ(FieldBillerID, v))
}

// BillerIDNEQ applies the NEQ predicate on the "biller_id" field.
func BillerIDNEQ(v int) predicate.Bill {
	return predicate.Bill(sql.FieldNEQ(FieldBillerID, v))
}

// BillerIDIn applies the In predicate on the "biller_id" field.
func BillerIDIn(vs ...int) predicate.Bill {
	return predicate.Bill(sql.FieldIn(FieldBillerID, vs...))
}

// BillerIDNotIn applies the NotIn predicate on the "biller_id" field.
func BillerIDNotIn(vs ...int) predicate.Bill {
	return predicate.Bill(sql.FieldNotIn(FieldBillerID, vs...))
}

// BillerIDIsNil applies the IsNil predicate on the "biller_id" field.
func BillerIDIsNil() predicate.Bill {
	return predicate.Bill(sql.FieldIsNull(FieldBillerID))
}

// BillerIDNotNil applies the NotNil predicate on the "biller_id" field.
func BillerIDNotNil() predicate.Bill {
	return predicate.Bill(sql.FieldNotNull(FieldBillerID))
}

// Ref1EQ applies the EQ predicate on the "ref_1" field.
func Ref1EQ(v int) predicate.Bill {
	return predicate.Bill(sql.FieldEQ(FieldRef1, v))
}

// Ref1NEQ applies the NEQ predicate on the "ref_1" field.
func Ref1NEQ(v int) predicate.Bill {
	return predicate.Bill(sql.FieldNEQ(FieldRef1, v))
}

// Ref1In applies the In predicate on the "ref_1" field.
func Ref1In(vs ...int) predicate.Bill {
	return predicate.Bill(sql.FieldIn(FieldRef1, vs...))
}

// Ref1NotIn applies the NotIn predicate on the "ref_1" field.
func Ref1NotIn(vs ...int) predicate.Bill {
	return predicate.Bill(sql.FieldNotIn(FieldRef1, vs...))
}

// Ref1IsNil applies the IsNil predicate on the "ref_1" field.
func Ref1IsNil() predicate.Bill {
	return predicate.Bill(sql.FieldIsNull(FieldRef1))
}

// Ref1NotNil applies the NotNil predicate on the "ref_1" field.
func Ref1NotNil() predicate.Bill {
	return predicate.Bill(sql.FieldNotNull(FieldRef1))
}

// Ref2EQ applies the EQ predicate on the "ref_2" field.
func Ref2EQ(v int) predicate.Bill {
	return predicate.Bill(sql.FieldEQ(FieldRef2, v))
}

// Ref2NEQ applies the NEQ predicate on the "ref_2" field.
func Ref2NEQ(v int) predicate.Bill {
	return predicate.Bill(sql.FieldNEQ(FieldRef2, v))
}

// Ref2In applies the In predicate on the "ref_2" field.
func Ref2In(vs ...int) predicate.Bill {
	return predicate.Bill(sql.FieldIn(FieldRef2, vs...))
}

// Ref2NotIn applies the NotIn predicate on the "ref_2" field.
func Ref2NotIn(vs ...int) predicate.Bill {
	return predicate.Bill(sql.FieldNotIn(FieldRef2, vs...))
}

// Ref2GT applies the GT predicate on the "ref_2" field.
func Ref2GT(v int) predicate.Bill {
	return predicate.Bill(sql.FieldGT(FieldRef2, v))
}

// Ref2GTE applies the GTE predicate on the "ref_2" field.
func Ref2GTE(v int) predicate.Bill {
	return predicate.Bill(sql.FieldGTE(FieldRef2, v))
}

// Ref2LT applies the LT predicate on the "ref_2" field.
func Ref2LT(v int) predicate.Bill {
	return predicate.Bill(sql.FieldLT(FieldRef2, v))
}

// Ref2LTE applies the LTE predicate on the "ref_2" field.
func Ref2LTE(v int) predicate.Bill {
	return predicate.Bill(sql.FieldLTE(FieldRef2, v))
}

// Ref2IsNil applies the IsNil predicate on the "ref_2" field.
func Ref2IsNil() predicate.Bill {
	return predicate.Bill(sql.FieldIsNull(FieldRef2))
}

// Ref2NotNil applies the NotNil predicate on the "ref_2" field.
func Ref2NotNil() predicate.Bill {
	return predicate.Bill(sql.FieldNotNull(FieldRef2))
}

// HasStore applies the HasEdge predicate on the "store" edge.
func HasStore() predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StoreTable, StoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStoreWith applies the HasEdge predicate on the "store" edge with a given conditions (other predicates).
func HasStoreWith(preds ...predicate.Store) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		step := newStoreStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCustomers applies the HasEdge predicate on the "customers" edge.
func HasCustomers() predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomersTable, CustomersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomersWith applies the HasEdge predicate on the "customers" edge with a given conditions (other predicates).
func HasCustomersWith(preds ...predicate.Customer) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		step := newCustomersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBillDetail applies the HasEdge predicate on the "bill_detail" edge.
func HasBillDetail() predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BillDetailTable, BillDetailColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBillDetailWith applies the HasEdge predicate on the "bill_detail" edge with a given conditions (other predicates).
func HasBillDetailWith(preds ...predicate.BillDetail) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		step := newBillDetailStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Bill) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Bill) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bill) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		p(s.Not())
	})
}
