// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"kapi/ent/billdetail"
	"kapi/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BillDetailDelete is the builder for deleting a BillDetail entity.
type BillDetailDelete struct {
	config
	hooks    []Hook
	mutation *BillDetailMutation
}

// Where appends a list predicates to the BillDetailDelete builder.
func (bdd *BillDetailDelete) Where(ps ...predicate.BillDetail) *BillDetailDelete {
	bdd.mutation.Where(ps...)
	return bdd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bdd *BillDetailDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, bdd.sqlExec, bdd.mutation, bdd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bdd *BillDetailDelete) ExecX(ctx context.Context) int {
	n, err := bdd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bdd *BillDetailDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(billdetail.Table, sqlgraph.NewFieldSpec(billdetail.FieldID, field.TypeInt))
	if ps := bdd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bdd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bdd.mutation.done = true
	return affected, err
}

// BillDetailDeleteOne is the builder for deleting a single BillDetail entity.
type BillDetailDeleteOne struct {
	bdd *BillDetailDelete
}

// Where appends a list predicates to the BillDetailDelete builder.
func (bddo *BillDetailDeleteOne) Where(ps ...predicate.BillDetail) *BillDetailDeleteOne {
	bddo.bdd.mutation.Where(ps...)
	return bddo
}

// Exec executes the deletion query.
func (bddo *BillDetailDeleteOne) Exec(ctx context.Context) error {
	n, err := bddo.bdd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{billdetail.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bddo *BillDetailDeleteOne) ExecX(ctx context.Context) {
	if err := bddo.Exec(ctx); err != nil {
		panic(err)
	}
}
