// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kapi/ent/bill"
	"kapi/ent/billdetail"
	"kapi/ent/customer"
	"kapi/ent/store"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Bill is the model entity for the Bill schema.
type Bill struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// BillerID holds the value of the "biller_id" field.
	BillerID int `json:"biller_id,omitempty"`
	// Ref1 holds the value of the "ref_1" field.
	Ref1 int `json:"ref_1,omitempty"`
	// Ref2 holds the value of the "ref_2" field.
	Ref2 int `json:"ref_2,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillQuery when eager-loading is set.
	Edges        BillEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BillEdges holds the relations/edges for other nodes in the graph.
type BillEdges struct {
	// Store holds the value of the store edge.
	Store *Store `json:"store,omitempty"`
	// Customers holds the value of the customers edge.
	Customers *Customer `json:"customers,omitempty"`
	// BillDetail holds the value of the bill_detail edge.
	BillDetail *BillDetail `json:"bill_detail,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// StoreOrErr returns the Store value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillEdges) StoreOrErr() (*Store, error) {
	if e.loadedTypes[0] {
		if e.Store == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: store.Label}
		}
		return e.Store, nil
	}
	return nil, &NotLoadedError{edge: "store"}
}

// CustomersOrErr returns the Customers value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillEdges) CustomersOrErr() (*Customer, error) {
	if e.loadedTypes[1] {
		if e.Customers == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.Customers, nil
	}
	return nil, &NotLoadedError{edge: "customers"}
}

// BillDetailOrErr returns the BillDetail value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillEdges) BillDetailOrErr() (*BillDetail, error) {
	if e.loadedTypes[2] {
		if e.BillDetail == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: billdetail.Label}
		}
		return e.BillDetail, nil
	}
	return nil, &NotLoadedError{edge: "bill_detail"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bill) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bill.FieldID, bill.FieldBillerID, bill.FieldRef1, bill.FieldRef2:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bill fields.
func (b *Bill) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bill.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case bill.FieldBillerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field biller_id", values[i])
			} else if value.Valid {
				b.BillerID = int(value.Int64)
			}
		case bill.FieldRef1:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ref_1", values[i])
			} else if value.Valid {
				b.Ref1 = int(value.Int64)
			}
		case bill.FieldRef2:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ref_2", values[i])
			} else if value.Valid {
				b.Ref2 = int(value.Int64)
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Bill.
// This includes values selected through modifiers, order, etc.
func (b *Bill) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QueryStore queries the "store" edge of the Bill entity.
func (b *Bill) QueryStore() *StoreQuery {
	return NewBillClient(b.config).QueryStore(b)
}

// QueryCustomers queries the "customers" edge of the Bill entity.
func (b *Bill) QueryCustomers() *CustomerQuery {
	return NewBillClient(b.config).QueryCustomers(b)
}

// QueryBillDetail queries the "bill_detail" edge of the Bill entity.
func (b *Bill) QueryBillDetail() *BillDetailQuery {
	return NewBillClient(b.config).QueryBillDetail(b)
}

// Update returns a builder for updating this Bill.
// Note that you need to call Bill.Unwrap() before calling this method if this Bill
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bill) Update() *BillUpdateOne {
	return NewBillClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Bill entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Bill) Unwrap() *Bill {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bill is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bill) String() string {
	var builder strings.Builder
	builder.WriteString("Bill(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("biller_id=")
	builder.WriteString(fmt.Sprintf("%v", b.BillerID))
	builder.WriteString(", ")
	builder.WriteString("ref_1=")
	builder.WriteString(fmt.Sprintf("%v", b.Ref1))
	builder.WriteString(", ")
	builder.WriteString("ref_2=")
	builder.WriteString(fmt.Sprintf("%v", b.Ref2))
	builder.WriteByte(')')
	return builder.String()
}

// Bills is a parsable slice of Bill.
type Bills []*Bill
